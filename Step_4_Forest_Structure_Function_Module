//////////////////////////////////////////////////////////
//
// Example RF tuning, classification and regression module for mapping forest strucure with GEDI
// Author T. Mayer 9/13/24; NASA SERVIR, Univeristy of Alabama in Huntsville, and University of Twente ITC
//
//////////////////////////////////////////////////////////

// var exportPath = 'users/tjm0042/PHD/GEDI_Height/';
// var ROI = ee.FeatureCollection("users/tjm0042/PHD/BTAP_P1")
// Map.addLayer(ROI, {}, 'ROI')
// //Map.centerObject(ROI,12);

var ROI = ee.Geometry.Rectangle([72.68095513823965,34.282270256791925, 72.83888360503653,34.406429412779026]) 
Map.addLayer(ROI, {}, "ROI",false)

var exportPath = 'users/tjm0042/PHD/KP_Height_Prelim2022';

var importPath = 'projects/servir-sco-assets/assets/SCO_HKH/KP_Height_Prelim/'

//////////////////////////////////////////////////////////

// Construct the path to the exported images
// var s2Composite = ee.Image(importPath + 'S2Composite_2022');
var demBands = ee.Image(importPath + 'DEMindices_2022');
var gediMosaicA = ee.Image(importPath + 'GEDIindicesA_2022').select("rh100");
print("gediMosaicA", gediMosaicA)
var gediMosaicB = ee.Image(importPath + 'GEDIindicesB_2022');
var S2indices = ee.Image(importPath + 'S2Indices_2022');
var HLS = ee.Image(importPath + 'HLS_2022').select(['NDWI', 'MNDWI', 'SAVI', 'NDMI', 'NDBI']).rename(['NDWI_HLS', 'MNDWI_HLS', 'SAVI_HLS', 'NDMI_HLS', 'NDBI_HLS']);
var LS = ee.Image(importPath + 'LandsatIndices_2022').select(['NDWI', 'MNDWI', 'SAVI', 'NDMI', 'NDBI']).rename(['NDWI_LS', 'MNDWI_LS', 'SAVI_LS', 'NDMI_LS', 'NDBI_LS']);
var LS_Tcap = ee.Image(importPath + 'landsatTasseledCapIndices_2022');
var S1_A = ee.Image(importPath + 's1Ascending_2022').select(['VV', 'VH', 'ratio', 'ndratio']).rename(['VV_A', 'VH_A', 'ratio_A', 'ndratio_A']);
var S1_D = ee.Image(importPath + 's1Descending_2022').select(['VV', 'VH', 'ratio', 'ndratio']).rename(['VV_D', 'VH_D', 'ratio_D', 'ndratio_D']);


// Get the image footprint to be used as geometry
var S2indices_Clip = S2indices.clip(ROI);

var viz = {
  min: 0.0, max: 0.3, gamma: 1.2,
  bands: ['S2_NDVI'],
};
Map.addLayer(S2indices_Clip, viz, 'Sentinel-2 NDVI', false);

//
var gediVis = {
  min: 0,
  max: 200,
  palette: ['#edf8fb','#b2e2e2','#66c2a4','#2ca25f','#006d2c'],
  bands: ['rh100']
};
  
Map.addLayer(gediMosaicA.select('rh100'), gediVis, 'rh100', false);

var stacked = S2indices
  .addBands(demBands)
  .addBands(gediMosaicA)
  // .addBands(gediMosaicB)
  .addBands(HLS)
  .addBands(LS)
  .addBands(LS_Tcap)
  .addBands(S1_A)
  .addBands(S1_D).clip(ROI);

Map.addLayer(stacked, {}, 'stacked', false);

///////////////////////////////////////////////////////////////////////////////
// Resample to a Grid
// ****************************************************

// GEDI measurements have horizontal accuracy of +/- 9 m
// This is problematic when matching the GEDI AGB values
// to Sentinel-2 pixels.
// To overcome this, we resample and aggregate all input
// images to a larger pixel-grid.


var utils = require("users/tjm0042/PHD:Forest_Structure_Function_Module/utils.js");

var gridScale = 10

var regrid_out = utils.regrid(gridScale, stacked, 'bilinear') 

Map.addLayer(regrid_out, {}, 'regrid_out', false);
// As larger GEDI pixels contain masked original
// pixels, it has a transparency mask.
// We update the mask to remove the transparency
var stackedResampled = regrid_out.updateMask(regrid_out.mask().gt(0));

// Visualize the resampled layers
Map.addLayer(stackedResampled, {}, 'stackedResampled_Regrid_Func', false);


///////////////////////////////////////////////////////////////////////////////


// Extract Training Features
// ****************************************************

var predictors = S2indices.bandNames().cat(demBands.bandNames()).cat(HLS.bandNames()).cat(LS.bandNames()).cat(LS_Tcap.bandNames()).cat(S1_A.bandNames()).cat(S1_D.bandNames());
print('predictors', predictors);


var predicted = gediMosaicA.bandNames().get(0);  // | .select('rh.*').bandNames();
print('predicted', predicted);

var predictorImage = stackedResampled.select(predictors);
var predictedImage = stackedResampled.select([predicted]).unmask();
Map.addLayer(predictedImage, {}, "continous_variable_of_intrest", false)

///////////////////////////////////////////////////////////////////////////////

//Adjust to make GEDI binary for classificaiton 

// //var classMask = predictedImage.gte(3).rename('class'); //<----------------use to remove smaller Rh values if needed


// var classMask = predictedImage.mask().toInt().rename('class');
// Map.addLayer(classMask, {}, "classMask",false)


var glad = ee.Image("projects/glad/GLCLU2020/Forest_height_2020").clip(ROI)
Map.addLayer(glad, {}, "glad", false)
glad = glad.gte(1).select(['b1']).rename(['class']);
print("glad", glad)

var classMask = gediMosaicA.addBands(glad)
Map.addLayer(classMask, {}, "classMask", false)
print("classMask", classMask)

//////////////////////////////////////////////////////////////////////////////////

var proj = S2indices_Clip.projection()
var grid = ROI.coveringGrid(proj, 1000)
grid = ee.FeatureCollection(grid).randomColumn("random", 42);
print("spatial_partition number of boxes in the grid", grid.size())
var val_samp = grid.filter('random <= 0.1').set("samp_type","val_samp");
var test_samp = grid.filter('random <= 0.3 and random >= 0.1').set("samp_type","test_samp");
var train_samp = grid.filter('random >= 0.3').set("samp_type","train_samp");

print('val_samp 10%', val_samp.size());
Map.addLayer(val_samp, {color: "blue"}, "val_samp 10%", false)

print('test_samp 20%', test_samp.size());
Map.addLayer(test_samp, {color: "red"}, "test_samp 20%", false)

print('train_samp 70%', train_samp.size());
Map.addLayer(train_samp, {color: "green"}, "train_samp 70%", false)


function sample_partition(Image, Labeled_Image, total_samples, region, gridScale, numnonSamples, numSamples) {
    var sample_partition_out = Image.addBands(Labeled_Image)
    .stratifiedSample({
      numPoints: total_samples,
      classBand: 'class',
      region: region, 
      scale: gridScale,
      seed: 42,
      classValues: [0, 1],
      classPoints: [numnonSamples, numSamples],  
      dropNulls: true,
      tileScale: 16,
      geometries:true
  }).randomColumn();
return ee.FeatureCollection(sample_partition_out)
}


var numSamples = 2000;
var numnonSamples = 2000;
var total_samples = numSamples + numnonSamples
print("total_samples", total_samples)
/////

var training = sample_partition(stackedResampled, classMask, total_samples, train_samp, gridScale, numSamples, numnonSamples)
Map.addLayer(training, {color: "green"}, "training")

var testing = sample_partition(stackedResampled, classMask, total_samples, test_samp, gridScale, numSamples, numnonSamples)
Map.addLayer(testing, {color: "red"}, "testing")

var validation = sample_partition(stackedResampled, classMask, total_samples, val_samp, gridScale, numSamples, numnonSamples)
Map.addLayer(validation, {color: "blue"}, "validation")

//////////////////////////////////////////////////////////////////
/////
/////Model Tuning: Run many RF models and export as csv 
/////
//////////////////////////////////////////////////////////////////
/////Global variables (likely to change with the timeselect function added)
var baseModule = require("users/tjm0042/PHD:Forest_Structure_Function_Module/model.js");

var year = 2022
var bands = predictors
var label = 'class'

////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////
///
///Run Classification RF
///
////////////////////////////////////////////////////////////////

// var parameter_post_tune = ee.Dictionary({
//   numberOfTrees: 100,
//   variablesPerSplit: 6,
//   minLeafPopulation: 5,
//   bagFraction: 0.3,
//   maxNodes: 8,
// }); //defaulted to "CLASSIFICATION" mode use other function for regression

// var rf_model =  baseModule.randomForest_classification_model(training, bands, stackedResampled, label, parameter_post_tune)//FeatureCollection, bandList, image, label, parameters)
// print(rf_model, {}, "rf_model")

////////////////////////////////////////////////////////////////
///
///Run Regression RF
///
////////////////////////////////////////////////////////////////

var string = 'rh100'
/////
var parameter_post_tune_reg = ee.Dictionary({
  numberOfTrees: 1000,
  variablesPerSplit: 6,
  minLeafPopulation: 5,
  bagFraction: 0.3,
  maxNodes: 8,
  model_mode: "REGRESSION"
}); 
/////randomForest_regression_model(FeatureCollection_train, FeatureCollection_test, bandList, image, label, string, parameters) {
  
var rf_model_reg =  baseModule.randomForest_regression_model(training, testing, bands, stackedResampled, label, string, parameter_post_tune_reg)// training//FeatureCollection, bandList, image, label, parameters)
//print(rf_model_reg, {}, "rf_model_reg")

//////////////////////////////////////////////////////////////////////
//
// Appy the example regression spatially
//
//////////////////////////////////////////////////////////////////////
var Regression_Predicted_Image = stackedResampled.classify(rf_model_reg);

var predictVis = {
  bands: ["classification"],
  max: 20,
  min: 1,
  opacity: 1,
  palette: ["000000","f5fff4","83d982","24ca11"]
};

Map.addLayer(Regression_Predicted_Image, predictVis, "Regression_Predicted_Image")

Export.image.toAsset({
  image: Regression_Predicted_Image.clip(ROI),
  description: 'Regression_Predicted_Image',
  assetId: exportPath + 'XXXXXXXX',
  region: ROI,
  scale: gridScale,
  maxPixels: 1e13
});



