//////////////////////////////////////////////////////////
//
// Define model parameters and perform a prelimnary grid search/tuning  eoffrt to infor the final model settings/paramaters
// Author T. Mayer 5/24/24; NASA SERVIR, Univeristy of Alabama in Huntsville, and University of Twente ITC
//
//////////////////////////////////////////////////////////

// var exportPath = 'users/tjm0042/PHD/GEDI_Height/';
var ROI = ee.FeatureCollection("users/tjm0042/PHD/BTAP_P1")
Map.addLayer(ROI, {}, 'ROI')
//Map.centerObject(ROI,12);

var exportPath = 'users/tjm0042/PHD/KP_Height_Prelim2022';

var importPath = 'projects/servir-sco-assets/assets/SCO_HKH/KP_Height_Prelim/'

//////////////////////////////////////////////////////////


// Construct the path to the exported images
// var s2Composite = ee.Image(importPath + 'S2Composite_2022');
var demBands = ee.Image(importPath + 'DEMindices_2022');
var gediMosaicA = ee.Image(importPath + 'GEDIindicesA_2022').select("rh100");
print("gediMosaicA", gediMosaicA)
var gediMosaicB = ee.Image(importPath + 'GEDIindicesB_2022');
var S2indices = ee.Image(importPath + 'S2Indices_2022');
var HLS = ee.Image(importPath + 'HLS_2022').select(['NDWI', 'MNDWI', 'SAVI', 'NDMI', 'NDBI']).rename(['NDWI_HLS', 'MNDWI_HLS', 'SAVI_HLS', 'NDMI_HLS', 'NDBI_HLS']);
var LS = ee.Image(importPath + 'LandsatIndices_2022').select(['NDWI', 'MNDWI', 'SAVI', 'NDMI', 'NDBI']).rename(['NDWI_LS', 'MNDWI_LS', 'SAVI_LS', 'NDMI_LS', 'NDBI_LS']);
var LS_Tcap = ee.Image(importPath + 'landsatTasseledCapIndices_2022');
var S1_A = ee.Image(importPath + 's1Ascending_2022').select(['VV', 'VH', 'ratio', 'ndratio']).rename(['VV_A', 'VH_A', 'ratio_A', 'ndratio_A']);
var S1_D = ee.Image(importPath + 's1Descending_2022').select(['VV', 'VH', 'ratio', 'ndratio']).rename(['VV_D', 'VH_D', 'ratio_D', 'ndratio_D']);


// Get the image footprint to be used as geometry
var S2indices_Clip = S2indices.clip(ROI);

var viz = {
  min: 0.0, max: 0.3, gamma: 1.2,
  bands: ['S2_NDVI'],
};
Map.addLayer(S2indices_Clip, viz, 'Sentinel-2 NDVI', false);

//
var gediVis = {
  min: 0,
  max: 200,
  palette: ['#edf8fb','#b2e2e2','#66c2a4','#2ca25f','#006d2c'],
  bands: ['rh100']
};
  
Map.addLayer(gediMosaicA.select('rh100'), gediVis, 'rh100', false);

var stacked = S2indices
  .addBands(demBands)
  .addBands(gediMosaicA)
  // .addBands(gediMosaicB)
  .addBands(HLS)
  .addBands(LS)
  .addBands(LS_Tcap)
  .addBands(S1_A)
  .addBands(S1_D).clip(ROI);

Map.addLayer(stacked, {}, 'stacked', false);

///////////////////////////////////////////////////////////////////////////////
// Resample to a Grid
// ****************************************************

// GEDI measurements have horizontal accuracy of +/- 9 m
// This is problematic when matching the GEDI AGB values
// to Sentinel-2 pixels.
// To overcome this, we resample and aggregate all input
// images to a larger pixel-grid.


var utils = require("users/tjm0042/PHD:Forest_Structure_Function_Module/utils.js");

var gridScale = 10

var regrid_out = utils.regrid(gridScale, stacked, 'bilinear') 

Map.addLayer(regrid_out, {}, 'regrid_out', false);
// As larger GEDI pixels contain masked original
// pixels, it has a transparency mask.
// We update the mask to remove the transparency
var stackedResampled = regrid_out.updateMask(regrid_out.mask().gt(0));

// Visualize the resampled layers
Map.addLayer(stackedResampled, {}, 'stackedResampled_Regrid_Func', false);


///////////////////////////////////////////////////////////////////////////////


// Extract Training Features
// ****************************************************

var predictors = S2indices.bandNames().cat(demBands.bandNames()).cat(HLS.bandNames()).cat(LS.bandNames()).cat(LS_Tcap.bandNames()).cat(S1_A.bandNames()).cat(S1_D.bandNames());
print('predictors', predictors);


var predicted = gediMosaicA.bandNames().get(0);  // | .select('rh.*').bandNames();
print('predicted', predicted);

var predictorImage = stackedResampled.select(predictors);
var predictedImage = stackedResampled.select([predicted]).unmask();
Map.addLayer(predictedImage, {}, "continous_variable_of_intrest", false)

///////////////////////////////////////////////////////////////////////////////

//Adjust to make GEDI binary for classificaiton 

// //var classMask = predictedImage.gte(3).rename('class'); //<----------------use to remove smaller Rh values if needed


// var classMask = predictedImage.mask().toInt().rename('class');
// Map.addLayer(classMask, {}, "classMask",false)


var glad = ee.Image("projects/glad/GLCLU2020/Forest_height_2020").clip(ROI)
Map.addLayer(glad, {}, "glad", false)
glad = glad.gte(1).select(['b1']).rename(['class']);
print("glad", glad)

var classMask = gediMosaicA.addBands(glad)
Map.addLayer(classMask, {}, "classMask", false)
print("classMask", classMask)

//////////////////////////////////////////////////////////////////////////////////
var numSamples = 1000;
var numnonSamples = 500;
var total_samples = numSamples + numnonSamples
print("total_samples", total_samples)
/////

var training = stackedResampled.addBands(classMask)
  .stratifiedSample({
    numPoints: total_samples,
    classBand: 'class',
    region: ROI,
    scale: gridScale,
    seed: 42,
    classValues: [0, 1],
    classPoints: [numnonSamples, numSamples],  
    dropNulls: true,
    tileScale: 16,
}).randomColumn();

print("training", training.first())

//////////////////////////////////////////////////////////////////
/////
/////Model Tuning: Run many RF models and export as csv 
/////
//////////////////////////////////////////////////////////////////
/////Global variables (likely to change with the timeselect function added)
var baseModule = require("users/tjm0042/PHD:Forest_Structure_Function_Module/model.js");

var year = 2022
var bands = predictors
var label = 'class'

//////////////////////////////////////////////////////////

// let's create the parameter space
var numberOfTrees = ee.List.sequence(10, 11, 1);
var variablesPerSplit = ee.List([null, bands.size()]);
var minLeafPopulation = ee.List.sequence(1, 2, 1);
var bagFraction = ee.List.sequence(0.5, 0.6, 0.1);
var maxNodes = ee.List([null]);
var model_mode = ee.String("REGRESSION"); //Beware this will run all stats so make sure you weigh the value/information
//of the stat complementary to the mode running in CLASSIFICATION, REGRESSION, PROBABILITY, MULTIPROBABILITY, RAW, RAW_REGRESSION
var predict_label = ee.List(predicted)



var parameterSpace = ee.Dictionary({
  numberOfTrees: numberOfTrees,
  variablesPerSplit: variablesPerSplit,
  minLeafPopulation: minLeafPopulation,
  bagFraction: bagFraction,
  maxNodes: maxNodes,
  model_mode: model_mode,
  predict_label: predict_label
});

print("parameterSpace", parameterSpace)


//label,
var rfClassifiers = baseModule.randomForestParameterSpace(training, bands, stackedResampled, parameterSpace) // trainingSample, bands, finalImagery, label, parameterSpace);
rfClassifiers = ee.FeatureCollection(rfClassifiers.flatten());
print("Preliminary Grid search rfClassifiers base don parameterspace testing ", rfClassifiers)


var nRFModels = numberOfTrees.size().multiply(variablesPerSplit.size())
                  .multiply(minLeafPopulation.size()).multiply(bagFraction.size())
                  .multiply(maxNodes.size())//.multiply(predict_label.length());
print('You are training ' + nRFModels.getInfo() + ' models. Brace Yourself!');

// This is exported to your google drive in the earthengine folder
Export.table.toDrive({
  collection: rfClassifiers,
  description: 'rf_models_' + label + '_' + year,
  folder: 'earthengine',
  fileNamePrefix: 'rf_models_' + label + '_' + year,
  fileFormat: 'CSV'
});

var Regression_Predicted_Image_Prelim = stackedResampled.classify(rfClassifiers.first());

var predictVis = {
  bands: ["classification"],
  max: 20,
  min: 1,
  opacity: 1,
  palette: ["000000","f5fff4","83d982","24ca11"]
};

Map.addLayer(Regression_Predicted_Image_Prelim, predictVis, "Regression_Predicted_Image_Prelim")
