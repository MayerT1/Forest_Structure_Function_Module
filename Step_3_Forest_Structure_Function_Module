//////////////////////////////////////////////////////////
//
// Example RF tuning, classifcaiton and regression module for mapping forest strucure with GEDI
// Author T. Mayer 5/24/24; NASA SERVIR, Univeristy of Alabama in Huntsville, and University of Twente ITC
//
//////////////////////////////////////////////////////////

// var exportPath = 'users/tjm0042/PHD/GEDI_Height/';
var ROI = ee.FeatureCollection("users/tjm0042/PHD/BTAP_P1")
Map.addLayer(ROI, {}, 'ROI')
Map.centerObject(ROI,12);

var exportPath = 'users/tjm0042/PHD/KP_Height_Prelim2022';

var importPath = 'projects/servir-sco-assets/assets/SCO_HKH/KP_Height_Prelim/'

//////////////////////////////////////////////////////////

// Construct the path to the exported images
// var s2Composite = ee.Image(importPath + 'S2Composite_2022');
var demBands = ee.Image(importPath + 'DEMindices_2022');
var gediMosaicA = ee.Image(importPath + 'GEDIindicesA_2022').select("rh100");
var gediMosaicB = ee.Image(importPath + 'GEDIindicesB_2022');
var S2indices = ee.Image(importPath + 'S2Indices_2022');
var HLS = ee.Image(importPath + 'HLS_2022').select(['NDWI', 'MNDWI', 'SAVI', 'NDMI', 'NDBI']).rename(['NDWI_HLS', 'MNDWI_HLS', 'SAVI_HLS', 'NDMI_HLS', 'NDBI_HLS']);
var LS = ee.Image(importPath + 'LandsatIndices_2022').select(['NDWI', 'MNDWI', 'SAVI', 'NDMI', 'NDBI']).rename(['NDWI_LS', 'MNDWI_LS', 'SAVI_LS', 'NDMI_LS', 'NDBI_LS']);
var LS_Tcap = ee.Image(importPath + 'landsatTasseledCapIndices_2022');
var S1_A = ee.Image(importPath + 's1Ascending_2022').select(['VV', 'VH', 'ratio', 'ndratio']).rename(['VV_A', 'VH_A', 'ratio_A', 'ndratio_A']);
var S1_D = ee.Image(importPath + 's1Descending_2022').select(['VV', 'VH', 'ratio', 'ndratio']).rename(['VV_D', 'VH_D', 'ratio_D', 'ndratio_D']);


// Get the image footprint to be used as geometry
var S2indices_Clip = S2indices.clip(ROI);

var viz = {
  min: 0.0, max: 0.3, gamma: 1.2,
  bands: ['S2_NDVI'],
};
Map.addLayer(S2indices_Clip, viz, 'Sentinel-2 NDVI', false);

//
var gediVis = {
  min: 0,
  max: 200,
  palette: ['#edf8fb','#b2e2e2','#66c2a4','#2ca25f','#006d2c'],
  bands: ['rh100']
};
  
Map.addLayer(gediMosaicA.select('rh100'), gediVis, 'rh100', false);

var stacked = S2indices
  .addBands(demBands)
  .addBands(gediMosaicA)
  // .addBands(gediMosaicB)
  .addBands(HLS)
  .addBands(LS)
  .addBands(LS_Tcap)
  .addBands(S1_A)
  .addBands(S1_D).clip(ROI);

Map.addLayer(stacked, {}, 'stacked', false);

///////////////////////////////////////////////////////////////////////////////
// Resample to a Grid
// ****************************************************

// GEDI measurements have horizontal accuracy of +/- 9 m
// This is problematic when matching the GEDI AGB values
// to Sentinel-2 pixels.
// To overcome this, we resample and aggregate all input
// images to a larger pixel-grid.


var utils = require("users/tjm0042/PHD:Forest_Structure_Function_Module/utils.js");

var gridScale = 10

var regrid_out = utils.regrid(gridScale, stacked, 'bilinear') 

Map.addLayer(regrid_out, {}, 'regrid_out', false);
// As larger GEDI pixels contain masked original
// pixels, it has a transparency mask.
// We update the mask to remove the transparency
var stackedResampled = regrid_out.updateMask(regrid_out.mask().gt(0));

// Visualize the resampled layers
Map.addLayer(stackedResampled, {}, 'stackedResampled_Regrid_Func', false);


///////////////////////////////////////////////////////////////////////////////


// Extract Training Features
// ****************************************************

var predictors = S2indices.bandNames().cat(demBands.bandNames()).cat(HLS.bandNames()).cat(LS.bandNames()).cat(LS_Tcap.bandNames()).cat(S1_A.bandNames()).cat(S1_D.bandNames());
print('predictors', predictors);

var predicted = gediMosaicA.bandNames().get(0);
print('predicted', predicted);

var predictorImage = stackedResampled.select(predictors);
var predictedImage = stackedResampled.select([predicted]).unmask();
Map.addLayer(predictedImage, {}, "continous_variable_of_intrest", false)

///////////////////////////////////////////////////////////////////////////////

//Adjust to make GEDI binary for classificaiton 

// //var classMask = predictedImage.gte(3).rename('class'); //<----------------use to remove smaller Rh values if needed


// var classMask = predictedImage.mask().toInt().rename('class');
// Map.addLayer(classMask, {}, "classMask",false)


var glad = ee.Image("projects/glad/GLCLU2020/Forest_height_2020").clip(ROI)
Map.addLayer(glad, {}, "glad", false)
glad = glad.gte(1).select(['b1']).rename(['class']);
print("glad", glad)

var classMask = gediMosaicA.addBands(glad)
Map.addLayer(classMask, {}, "classMask", false)
print("classMask", classMask)

//////////////////////////////////////////////////////////////////////////////////
var numSamples = 1000;
var numnonSamples = 500;
var total_samples = numSamples + numnonSamples
print("total_samples", total_samples)
/////

var training = stackedResampled.addBands(classMask)
  .stratifiedSample({
    numPoints: total_samples,
    classBand: 'class',
    region: ROI,
    scale: gridScale,
    seed: 42,
    classValues: [0, 1],
    classPoints: [numnonSamples, numSamples],  
    dropNulls: true,
    tileScale: 16,
}).randomColumn();

print("training", training.first())

//////////////////////////////////////////////////////////////////
/////
/////Model Tuning: Run many RF models and export as csv 
/////
//////////////////////////////////////////////////////////////////
/////Global variables (likely to change with the timeselect function added)
var baseModule = require("users/tjm0042/PHD:Forest_Structure_Function_Module/model.js");

var year = 2022
var bands = predictors
var label = 'class'

//////////////////////////////////////////////////////////

// // let's create the parameter space
// var numberOfTrees = ee.List.sequence(10, 30, 10);
// var variablesPerSplit = ee.List([null, bands.size()]);
// var minLeafPopulation = ee.List.sequence(1, 3, 1);
// var bagFraction = ee.List.sequence(0.5, 0.7, 0.1);
// var maxNodes = ee.List([null]);
// var model_mode = ee.String("REGRESSION"); //Beware this will run all stats so make sure you weigh the value/information
// //of the stat complementary to the mode running inCLASSIFICATION, REGRESSION, PROBABILITY, MULTIPROBABILITY, RAW, RAW_REGRESSION

// var parameterSpace = ee.Dictionary({
//   numberOfTrees: numberOfTrees,
//   variablesPerSplit: variablesPerSplit,
//   minLeafPopulation: minLeafPopulation,
//   bagFraction: bagFraction,
//   maxNodes: maxNodes,
//   model_mode: model_mode,
// });

// print("parameterSpace", parameterSpace)

// var rfClassifiers = baseModule.randomForestParameterSpace(training, bands, stackedResampled, label, parameterSpace) // trainingSample, bands, finalImagery, label, parameterSpace);
// rfClassifiers = ee.FeatureCollection(rfClassifiers.flatten());

// var nRFModels = numberOfTrees.size().multiply(variablesPerSplit.size())
//                   .multiply(minLeafPopulation.size()).multiply(bagFraction.size())
//                   .multiply(maxNodes.size());
// print('You are training ' + nRFModels.getInfo() + ' models. Brace Yourself!');

// // This is exported to your google drive in the earthengine folder
// Export.table.toDrive({
//   collection: rfClassifiers,
//   description: 'rf_models_' + label + '_' + year,
//   folder: 'earthengine',
//   fileNamePrefix: 'rf_models_' + label + '_' + year,
//   fileFormat: 'CSV'
// });

//////////////////////////////////////////////////////////////////
/////
/////Run Classification RF
/////
//////////////////////////////////////////////////////////////////

// var parameter_post_tune = ee.Dictionary({
//   numberOfTrees: 100,
//   variablesPerSplit: 6,
//   minLeafPopulation: 5,
//   bagFraction: 0.3,
//   maxNodes: 8,
// }); //defaulted to "CLASSIFICATION" mode use other function for regression

// var rf_model =  baseModule.randomForest_classification_model(training, bands, stackedResampled, label, parameter_post_tune)//FeatureCollection, bandList, image, label, parameters)
// print(rf_model, {}, "rf_model")

//////////////////////////////////////////////////////////////////
/////
/////Run Regression RF
/////
//////////////////////////////////////////////////////////////////

var string = 'rh100'
/////
var parameter_post_tune_reg = ee.Dictionary({
  numberOfTrees: 100,
  variablesPerSplit: 6,
  minLeafPopulation: 5,
  bagFraction: 0.3,
  maxNodes: 8,
  model_mode: "REGRESSION"
}); 

var rf_model_reg =  baseModule.randomForest_regression_model(training, bands, stackedResampled, label, string, parameter_post_tune_reg)//FeatureCollection, bandList, image, label, parameters)
//print(rf_model_reg, {}, "rf_model_reg")

//////////////////////////////////////////////////////////////////////
//
// Appy the example regression spatially
//
//////////////////////////////////////////////////////////////////////
var Regression_Predicted_Image = stackedResampled.classify(rf_model_reg);

var predictVis = {
  bands: ["classification"],
  max: 20,
  min: 1,
  opacity: 1,
  palette: ["000000","f5fff4","83d982","24ca11"]
};

Map.addLayer(Regression_Predicted_Image, predictVis, "Regression_Predicted_Image")

Export.image.toAsset({
  image: Regression_Predicted_Image.clip(ROI),
  description: 'Regression_Predicted_Image',
  assetId: exportPath + 'XXXXXXXX',
  region: ROI,
  scale: gridScale,
  maxPixels: 1e13
});

//////////////////////////////////////////////////////////////////////
//
// Evaluation / Comparison
//
//////////////////////////////////////////////////////////////////////


var glad_add = ee.Image("projects/glad/GLCLU2020/Forest_height_2020").clip(ROI)

var glad_add_gte = glad_add.gte(1);
var glad_add_gte_only = glad_add.updateMask(glad_add_gte);
Map.addLayer(glad_add_gte_only,{}, 'glad_add_gte_only')


var stacked_Comp = Regression_Predicted_Image.addBands(glad_add_gte_only)
Map.addLayer(stacked_Comp, {}, "stacked_Comp", false)

///////////Stratified approach to sample all heights
// var glad_sample= stacked_Comp.toInt().stratifiedSample({numPoints: 5,
//                                         classBand: "classification" ,
//                                         region: ROI,
//                                         scale: 10,
//                                         seed: 42,
//                                         geometries: true,
  
// })


// print("glad_sample", glad_sample)
// Map.addLayer(glad_sample, {} , "glad_sample")


///
///////////Random sample approach
var rand_Pts = ee.FeatureCollection.randomPoints({region: ROI, points: 1000, seed: 42, maxError:10})
print("rand_Pts", rand_Pts)

var glad_sample = stacked_Comp.sample({region: rand_Pts,
                            scale:1,
                            // projection,
                            // factor,
                            numPixels: 10e13,
                            seed:42,
                            // dropNulls,
                            // tileScale,
                            geometries: true,
})
print("glad_sample", glad_sample)
Map.addLayer(glad_sample, {color: 'green'} , "glad_sample", false)



/////////////
// Calculate RMSE
var calculateRmse = function(input, string) {
    var observed = ee.Array(
      input.aggregate_array(string));
    var p_class = ee.Array(
      input.aggregate_array('classification'));
    var rmse = observed.subtract(p_class).pow(2)
      .reduce('mean', [0]).sqrt().get([0]);
    return rmse;
};
var rmse = calculateRmse(glad_sample, 'b1');
print('Glad v. CH RF', rmse)


// Create a plot of observed vs. predicted values
var chart3 = ui.Chart.feature.byFeature({
  features: glad_sample.select(['b1', 'classification']),
  xProperty: 'b1',
  yProperties: ['classification'],
}).setChartType('ScatterChart')
  .setOptions({
    title: 'Glad v. CH RF',
    dataOpacity: 0.8,
    hAxis: {'title': 'Observed'},
    vAxis: {'title': 'Predicted'},
    legend: {position: 'right'},
    series: {
      0: {
        visibleInLegend: false,
        color: '#525252',
        pointSize: 3,
        pointShape: 'triangle',
      },
    },
    trendlines: {
      0: {
        type: 'linear', 
        color: 'black', 
        lineWidth: 1,
        pointSize: 0,
        labelInLegend: 'Linear Fit',
        visibleInLegend: true,
        showR2: true
      }
    },
    chartArea: {left: 100, bottom:50, width:'50%'},

});
print(chart3);
